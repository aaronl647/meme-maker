{"version":3,"sources":["components/Meme.js","App.js","serviceWorker.js","index.js"],"names":["Meme","template","onClick","className","key","id","src","url","alt","meme","App","useState","templates","setTemplates","setTemplate","topText","setTopText","bottomText","setBottomText","setMeme","useEffect","fetch","then","image","json","res","data","memes","style","textAlign","width","onSubmit","e","a","preventDefault","params","template_id","text0","text1","username","process","password","obj","Object","entries","map","value","join","response","placeholder","onChange","target","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+OAEaA,G,MAAO,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,yBACEC,IAAKH,EAASI,GACdC,IAAKL,EAASM,IACdC,IAAKP,EAASQ,KACdP,QAASA,SC2ENQ,MA7Ef,WAAgB,IAAD,EACqBC,mBAAS,IAD9B,mBACNC,EADM,KACKC,EADL,OAEmBF,mBAAS,MAF5B,mBAENV,EAFM,KAEIa,EAFJ,OAGiBH,mBAAS,IAH1B,mBAGNI,EAHM,KAGGC,EAHH,OAIuBL,mBAAS,IAJhC,mBAINM,EAJM,KAIMC,EAJN,OAKWP,mBAAS,MALpB,mBAKNF,EALM,KAKAU,EALA,KAab,OANAC,qBAAU,WACRC,MAAM,qCAAqCC,MAAK,SAACC,GAAD,OAC9CA,EAAMC,OAAOF,MAAK,SAACG,GAAD,OAASZ,EAAaY,EAAIC,KAAKC,eAElD,IAEClB,EAEA,yBAAKmB,MAAO,CAAEC,UAAW,WACvB,qDACA,yBAAKD,MAAO,CAAEE,MAAO,SAAWxB,IAAKG,EAAMD,IAAI,iBAKnD,yBAAKoB,MAAO,CAAEC,UAAW,WACtB5B,GACC,0BACE8B,SAAQ,uCAAE,WAAOC,GAAP,mBAAAC,EAAA,6DACRD,EAAEE,iBAEIC,EAAS,CACbC,YAAanC,EAASI,GACtBgC,MAAOtB,EACPuB,MAAOrB,EACPsB,SAAUC,YACVC,SAAUD,gBARJ,SAUenB,MAAM,wCAAD,QAxCZqB,EA0CZP,EAxCP,IADQQ,OAAOC,QAAQF,GAAKG,KAAI,mCAAEzC,EAAF,KAAO0C,EAAP,qBAAqB1C,EAArB,YAA4B0C,MAC/CC,KAAK,QA4BP,cAUFC,EAVE,gBAeWA,EAASxB,OAfpB,OAeFA,EAfE,OAgBRL,EAAQK,EAAKE,KAAKnB,KAhBV,iCA9BO,IAACmC,IA8BR,OAAF,uDAmBR,kBAAC,EAAD,CAAMzC,SAAUA,IAChB,2BACEgD,YAAY,WACZH,MAAO/B,EACPmC,SAAU,SAAClB,GAAD,OAAOhB,EAAWgB,EAAEmB,OAAOL,UAEvC,2BACEG,YAAY,cACZH,MAAO7B,EACPiC,SAAU,SAAClB,GAAD,OAAOd,EAAcc,EAAEmB,OAAOL,UAE1C,4BAAQM,KAAK,UAAb,mBAGFnD,GACA,oCACE,4DACCW,EAAUiC,KAAI,SAAC5C,GACd,OACE,kBAAC,EAAD,CACEA,SAAUA,EACVC,QAAS,WACPY,EAAYb,YC/DVoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8dec62f7.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Meme = ({ template, onClick }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm\">\n          <img\n            key={template.id}\n            src={template.url}\n            alt={template.meme}\n            onClick={onClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Meme } from \"./components/Meme\";\n\nconst objectToQueryParam = (obj) => {\n  const params = Object.entries(obj).map(([key, value]) => `${key}=${value}`);\n  return \"?\" + params.join(\"&\");\n};\n\nfunction App() {\n  const [templates, setTemplates] = useState([]);\n  const [template, setTemplate] = useState(null);\n  const [topText, setTopText] = useState(\"\");\n  const [bottomText, setBottomText] = useState(\"\");\n  const [meme, setMeme] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then((image) =>\n      image.json().then((res) => setTemplates(res.data.memes))\n    );\n  }, []);\n\n  if (meme) {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <h1>Enjoy your Spicy Meme</h1>\n        <img style={{ width: '500px' }} src={meme} alt=\"Custom Meme\" />\n      </div>\n    );\n  }\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      {template && (\n        <form\n          onSubmit={async (e) => {\n            e.preventDefault();\n            //Add logic to create meme from api\n            const params = {\n              template_id: template.id,\n              text0: topText,\n              text1: bottomText,\n              username: process.env.REACT_APP_IMGFLIP_USERNAME,\n              password: process.env.REACT_APP_IMGFLIP_PASSWORD,\n            };\n            const response = await fetch(\n              `https://api.imgflip.com/caption_image${objectToQueryParam(\n                params\n              )}`\n            );\n            const json = await response.json();\n            setMeme(json.data.url);\n          }}\n        >\n          <Meme template={template} />\n          <input\n            placeholder=\"Top Text\"\n            value={topText}\n            onChange={(e) => setTopText(e.target.value)}\n          />\n          <input\n            placeholder=\"Bottom Text\"\n            value={bottomText}\n            onChange={(e) => setBottomText(e.target.value)}\n          />\n          <button type=\"submit\"> Create Meme </button>\n        </form>\n      )}\n      {!template && (\n        <>\n          <h1>Select a Spicy Meme Template</h1>\n          {templates.map((template) => {\n            return (\n              <Meme\n                template={template}\n                onClick={() => {\n                  setTemplate(template);\n                }}\n              />\n            );\n          })}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}